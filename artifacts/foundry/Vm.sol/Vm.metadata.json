{
  "compiler": {
    "version": "0.6.12+commit.27d51765"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "accesses",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "readSlots",
            "type": "bytes32[]"
          },
          {
            "internalType": "bytes32[]",
            "name": "writeSlots",
            "type": "bytes32[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "activeFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "addr",
        "outputs": [
          {
            "internalType": "address",
            "name": "keyAddr",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allowCheatcodes"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "condition",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "assume"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "char",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "breakpoint"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "char",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "breakpoint"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "broadcast"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "signer",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "broadcast"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "broadcast"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newChainId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "chainId"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "clearMockedCalls"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "closeFile"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newCoinbase",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "coinbase"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "salt",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "initCodeHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "computeCreate2Address",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "salt",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "initCodeHash",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "deployer",
            "type": "address"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "computeCreate2Address",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "deployer",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "computeCreateAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "from",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "to",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "copyFile",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "copied",
            "type": "uint64"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "recursive",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createDir"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "urlOrAlias",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "urlOrAlias",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "blockNumber",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "urlOrAlias",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "txHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "urlOrAlias",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "blockNumber",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createSelectFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "urlOrAlias",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "txHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createSelectFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "urlOrAlias",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createSelectFork",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "walletLabel",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createWallet",
        "outputs": [
          {
            "internalType": "struct VmSafe.Wallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "privateKey",
                "type": "uint256"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createWallet",
        "outputs": [
          {
            "internalType": "struct VmSafe.Wallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "privateKey",
                "type": "uint256"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "walletLabel",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createWallet",
        "outputs": [
          {
            "internalType": "struct VmSafe.Wallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "privateKey",
                "type": "uint256"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "newBalance",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "deal"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "snapshotId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "deleteSnapshot",
        "outputs": [
          {
            "internalType": "bool",
            "name": "success",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "deleteSnapshots"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "mnemonic",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "derivationPath",
            "type": "string"
          },
          {
            "internalType": "uint32",
            "name": "index",
            "type": "uint32"
          },
          {
            "internalType": "string",
            "name": "language",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "deriveKey",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "mnemonic",
            "type": "string"
          },
          {
            "internalType": "uint32",
            "name": "index",
            "type": "uint32"
          },
          {
            "internalType": "string",
            "name": "language",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "deriveKey",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "mnemonic",
            "type": "string"
          },
          {
            "internalType": "uint32",
            "name": "index",
            "type": "uint32"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "deriveKey",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "mnemonic",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "derivationPath",
            "type": "string"
          },
          {
            "internalType": "uint32",
            "name": "index",
            "type": "uint32"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "deriveKey",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newDifficulty",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "difficulty"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "pathToStateJson",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "dumpState"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "value",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envAddress",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "value",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envBool",
        "outputs": [
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envBool",
        "outputs": [
          {
            "internalType": "bool[]",
            "name": "value",
            "type": "bool[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envBytes",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envBytes",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "value",
            "type": "bytes[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envBytes32",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "value",
            "type": "bytes32[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envBytes32",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envInt",
        "outputs": [
          {
            "internalType": "int256[]",
            "name": "value",
            "type": "int256[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envInt",
        "outputs": [
          {
            "internalType": "int256",
            "name": "value",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "bytes32[]",
            "name": "defaultValue",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "value",
            "type": "bytes32[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "int256[]",
            "name": "defaultValue",
            "type": "int256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "int256[]",
            "name": "value",
            "type": "int256[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "defaultValue",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "defaultValue",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "address",
            "name": "value",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "defaultValue",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "bytes[]",
            "name": "defaultValue",
            "type": "bytes[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "value",
            "type": "bytes[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "uint256[]",
            "name": "defaultValue",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "value",
            "type": "uint256[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "string[]",
            "name": "defaultValue",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "value",
            "type": "string[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "bytes",
            "name": "defaultValue",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "defaultValue",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "int256",
            "name": "defaultValue",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "int256",
            "name": "value",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "address[]",
            "name": "defaultValue",
            "type": "address[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "value",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "defaultValue",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          },
          {
            "internalType": "bool[]",
            "name": "defaultValue",
            "type": "bool[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envOr",
        "outputs": [
          {
            "internalType": "bool[]",
            "name": "value",
            "type": "bool[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envString",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "value",
            "type": "string[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envString",
        "outputs": [
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envUint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "delim",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "envUint",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "value",
            "type": "uint256[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "newRuntimeBytecode",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "etch"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "fromBlock",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "toBlock",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes32[]",
            "name": "topics",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "eth_getLogs",
        "outputs": [
          {
            "internalType": "struct VmSafe.EthGetLogs[]",
            "name": "logs",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "address",
                "name": "emitter",
                "type": "address"
              },
              {
                "internalType": "bytes32[]",
                "name": "topics",
                "type": "bytes32[]"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              },
              {
                "internalType": "bytes32",
                "name": "blockHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "blockNumber",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "transactionHash",
                "type": "bytes32"
              },
              {
                "internalType": "uint64",
                "name": "transactionIndex",
                "type": "uint64"
              },
              {
                "internalType": "uint256",
                "name": "logIndex",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "removed",
                "type": "bool"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "exists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "result",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "uint64",
            "name": "gas",
            "type": "uint64"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "uint64",
            "name": "gas",
            "type": "uint64"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint64",
            "name": "count",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint64",
            "name": "count",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint64",
            "name": "count",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "uint64",
            "name": "minGas",
            "type": "uint64"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCallMinGas"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "uint64",
            "name": "minGas",
            "type": "uint64"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint64",
            "name": "count",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectCallMinGas"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectEmit"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "checkTopic1",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "checkTopic2",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "checkTopic3",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "checkData",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectEmit"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "checkTopic1",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "checkTopic2",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "checkTopic3",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "checkData",
            "type": "bool"
          },
          {
            "internalType": "address",
            "name": "emitter",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectEmit"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "emitter",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectEmit"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "revertData",
            "type": "bytes4"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectRevert"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "revertData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectRevert"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectRevert"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "min",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "max",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectSafeMemory"
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "min",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "max",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "expectSafeMemoryCall"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newBasefee",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "fee"
      },
      {
        "inputs": [
          {
            "internalType": "string[]",
            "name": "commandInput",
            "type": "string[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "ffi",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "result",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "fsMetadata",
        "outputs": [
          {
            "internalType": "struct VmSafe.FsMetadata",
            "name": "metadata",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "isDir",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "isSymlink",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "length",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "readOnly",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "modified",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "accessed",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "created",
                "type": "uint256"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getBlockNumber",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "height",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getBlockTimestamp",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "artifactPath",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getCode",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "creationBytecode",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "artifactPath",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getDeployedCode",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "runtimeBytecode",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getLabel",
        "outputs": [
          {
            "internalType": "string",
            "name": "currentLabel",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "elementSlot",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "getMappingKeyAndParentOf",
        "outputs": [
          {
            "internalType": "bool",
            "name": "found",
            "type": "bool"
          },
          {
            "internalType": "bytes32",
            "name": "key",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "parent",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "mappingSlot",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "getMappingLength",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "length",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "mappingSlot",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "idx",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "getMappingSlotAt",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getNonce",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "nonce",
            "type": "uint64"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct VmSafe.Wallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "privateKey",
                "type": "uint256"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "getNonce",
        "outputs": [
          {
            "internalType": "uint64",
            "name": "nonce",
            "type": "uint64"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "getRecordedLogs",
        "outputs": [
          {
            "internalType": "struct VmSafe.Log[]",
            "name": "logs",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "bytes32[]",
                "name": "topics",
                "type": "bytes32[]"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              },
              {
                "internalType": "address",
                "name": "emitter",
                "type": "address"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "isDir",
        "outputs": [
          {
            "internalType": "bool",
            "name": "result",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "isFile",
        "outputs": [
          {
            "internalType": "bool",
            "name": "result",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isPersistent",
        "outputs": [
          {
            "internalType": "bool",
            "name": "persistent",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "keyExists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "newLabel",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "label"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "slot",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "load",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "data",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "pathToAllocsJson",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "loadAllocs"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "accounts",
            "type": "address[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "makePersistent"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account0",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "account1",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "makePersistent"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "makePersistent"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account0",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "account1",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "account2",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "makePersistent"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "returnData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "mockCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "returnData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "mockCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "msgValue",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "revertData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "mockCallRevert"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "callee",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "revertData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "mockCallRevert"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "parsedValue",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseBool",
        "outputs": [
          {
            "internalType": "bool",
            "name": "parsedValue",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseBytes",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "parsedValue",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseBytes32",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "parsedValue",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseInt",
        "outputs": [
          {
            "internalType": "int256",
            "name": "parsedValue",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJson",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "abiEncodedData",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJson",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "abiEncodedData",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonAddressArray",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonBool",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonBoolArray",
        "outputs": [
          {
            "internalType": "bool[]",
            "name": "",
            "type": "bool[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonBytes",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonBytes32",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonBytes32Array",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonBytesArray",
        "outputs": [
          {
            "internalType": "bytes[]",
            "name": "",
            "type": "bytes[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonInt",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonIntArray",
        "outputs": [
          {
            "internalType": "int256[]",
            "name": "",
            "type": "int256[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonKeys",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "keys",
            "type": "string[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonString",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonStringArray",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "",
            "type": "string[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonUint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseJsonUintArray",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "parseUint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "parsedValue",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "pauseGasMetering"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "msgSender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "txOrigin",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "prank"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "msgSender",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "prank"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "newPrevrandao",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "prevrandao"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "projectRoot",
        "outputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "readCallers",
        "outputs": [
          {
            "internalType": "enum VmSafe.CallerMode",
            "name": "callerMode",
            "type": "uint8"
          },
          {
            "internalType": "address",
            "name": "msgSender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "txOrigin",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "uint64",
            "name": "maxDepth",
            "type": "uint64"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readDir",
        "outputs": [
          {
            "internalType": "struct VmSafe.DirEntry[]",
            "name": "entries",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "errorMessage",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "path",
                "type": "string"
              },
              {
                "internalType": "uint64",
                "name": "depth",
                "type": "uint64"
              },
              {
                "internalType": "bool",
                "name": "isDir",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "isSymlink",
                "type": "bool"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "uint64",
            "name": "maxDepth",
            "type": "uint64"
          },
          {
            "internalType": "bool",
            "name": "followLinks",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readDir",
        "outputs": [
          {
            "internalType": "struct VmSafe.DirEntry[]",
            "name": "entries",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "errorMessage",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "path",
                "type": "string"
              },
              {
                "internalType": "uint64",
                "name": "depth",
                "type": "uint64"
              },
              {
                "internalType": "bool",
                "name": "isDir",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "isSymlink",
                "type": "bool"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readDir",
        "outputs": [
          {
            "internalType": "struct VmSafe.DirEntry[]",
            "name": "entries",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "errorMessage",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "path",
                "type": "string"
              },
              {
                "internalType": "uint64",
                "name": "depth",
                "type": "uint64"
              },
              {
                "internalType": "bool",
                "name": "isDir",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "isSymlink",
                "type": "bool"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readFile",
        "outputs": [
          {
            "internalType": "string",
            "name": "data",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readFileBinary",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readLine",
        "outputs": [
          {
            "internalType": "string",
            "name": "line",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "linkPath",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "readLink",
        "outputs": [
          {
            "internalType": "string",
            "name": "targetPath",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "record"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "recordLogs"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "rememberKey",
        "outputs": [
          {
            "internalType": "address",
            "name": "keyAddr",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "recursive",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeDir"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "removeFile"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "resetNonce"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "resumeGasMetering"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "snapshotId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "revertTo",
        "outputs": [
          {
            "internalType": "bool",
            "name": "success",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "snapshotId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "revertToAndDelete",
        "outputs": [
          {
            "internalType": "bool",
            "name": "success",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "accounts",
            "type": "address[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "revokePersistent"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "revokePersistent"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newHeight",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "roll"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "txHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "rollFork"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "blockNumber",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "rollFork"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "blockNumber",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "rollFork"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "txHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "rollFork"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "method",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "params",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "rpc",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "rpcAlias",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "rpcUrl",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "rpcUrlStructs",
        "outputs": [
          {
            "internalType": "struct VmSafe.Rpc[]",
            "name": "urls",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "key",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "url",
                "type": "string"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "rpcUrls",
        "outputs": [
          {
            "internalType": "string[2][]",
            "name": "urls",
            "type": "string[2][]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "selectFork"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "address[]",
            "name": "values",
            "type": "address[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeAddress",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "value",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeAddress",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "bool[]",
            "name": "values",
            "type": "bool[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeBool",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeBool",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "bytes[]",
            "name": "values",
            "type": "bytes[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeBytes",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeBytes",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "bytes32[]",
            "name": "values",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeBytes32",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeBytes32",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "int256",
            "name": "value",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeInt",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "int256[]",
            "name": "values",
            "type": "int256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeInt",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeJson",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "string[]",
            "name": "values",
            "type": "string[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeString",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeString",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeUint",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "objectKey",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          },
          {
            "internalType": "uint256[]",
            "name": "values",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "serializeUint",
        "outputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setEnv"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint64",
            "name": "newNonce",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setNonce"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint64",
            "name": "newNonce",
            "type": "uint64"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setNonceUnsafe"
      },
      {
        "inputs": [
          {
            "internalType": "struct VmSafe.Wallet",
            "name": "wallet",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "addr",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyX",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "publicKeyY",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "privateKey",
                "type": "uint256"
              }
            ]
          },
          {
            "internalType": "bytes32",
            "name": "digest",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "sign",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
          },
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "digest",
            "type": "bytes32"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "sign",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
          },
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "digest",
            "type": "bytes32"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "signP256",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "skipTest",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "skip"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "duration",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "sleep"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "snapshot",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "snapshotId",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startBroadcast"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "signer",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startBroadcast"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "privateKey",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startBroadcast"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startMappingRecording"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "msgSender",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startPrank"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "msgSender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "txOrigin",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startPrank"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "startStateDiffRecording"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "stopAndReturnStateDiff",
        "outputs": [
          {
            "internalType": "struct VmSafe.AccountAccess[]",
            "name": "accountAccesses",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "struct VmSafe.ChainInfo",
                "name": "chainInfo",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "forkId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "chainId",
                    "type": "uint256"
                  }
                ]
              },
              {
                "internalType": "enum VmSafe.AccountAccessKind",
                "name": "kind",
                "type": "uint8"
              },
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "accessor",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "initialized",
                "type": "bool"
              },
              {
                "internalType": "uint256",
                "name": "oldBalance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "newBalance",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "deployedCode",
                "type": "bytes"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              },
              {
                "internalType": "bool",
                "name": "reverted",
                "type": "bool"
              },
              {
                "internalType": "struct VmSafe.StorageAccess[]",
                "name": "storageAccesses",
                "type": "tuple[]",
                "components": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "slot",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bool",
                    "name": "isWrite",
                    "type": "bool"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "previousValue",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "newValue",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bool",
                    "name": "reverted",
                    "type": "bool"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "stopBroadcast"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "stopMappingRecording"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "stopPrank"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "slot",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "store"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "data",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toBase64",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toBase64",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "data",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toBase64URL",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toBase64URL",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "value",
            "type": "address"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toString",
        "outputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toString",
        "outputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "value",
            "type": "bytes"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toString",
        "outputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toString",
        "outputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "int256",
            "name": "value",
            "type": "int256"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toString",
        "outputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ],
        "stateMutability": "pure",
        "type": "function",
        "name": "toString",
        "outputs": [
          {
            "internalType": "string",
            "name": "stringifiedValue",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "forkId",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "txHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transact"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "txHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transact"
      },
      {
        "inputs": [
          {
            "internalType": "string[]",
            "name": "commandInput",
            "type": "string[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "tryFfi",
        "outputs": [
          {
            "internalType": "struct VmSafe.FfiResult",
            "name": "result",
            "type": "tuple",
            "components": [
              {
                "internalType": "int32",
                "name": "exitCode",
                "type": "int32"
              },
              {
                "internalType": "bytes",
                "name": "stdout",
                "type": "bytes"
              },
              {
                "internalType": "bytes",
                "name": "stderr",
                "type": "bytes"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newGasPrice",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "txGasPrice"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "unixTime",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "milliseconds",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newTimestamp",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "warp"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "data",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "writeFile"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "writeFileBinary"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "valueKey",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "writeJson"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "json",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "writeJson"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "path",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "data",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "writeLine"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "accesses(address)": {
          "notice": "Gets all accessed reads and write slot from a `vm.record` session, for a given address."
        },
        "activeFork()": {
          "notice": "Returns the identifier of the currently active fork. Reverts if no fork is currently active."
        },
        "addr(uint256)": {
          "notice": "Gets the address for a given private key."
        },
        "allowCheatcodes(address)": {
          "notice": "In forking mode, explicitly grant the given address cheatcode access."
        },
        "assume(bool)": {
          "notice": "If the condition is false, discard this run's fuzz inputs and generate new ones."
        },
        "breakpoint(string)": {
          "notice": "Writes a breakpoint to jump to in the debugger."
        },
        "breakpoint(string,bool)": {
          "notice": "Writes a conditional breakpoint to jump to in the debugger."
        },
        "broadcast()": {
          "notice": "Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain."
        },
        "broadcast(address)": {
          "notice": "Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain."
        },
        "broadcast(uint256)": {
          "notice": "Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain."
        },
        "chainId(uint256)": {
          "notice": "Sets `block.chainid`."
        },
        "clearMockedCalls()": {
          "notice": "Clears all mocked calls."
        },
        "closeFile(string)": {
          "notice": "Closes file for reading, resetting the offset and allowing to read it from beginning with readLine. `path` is relative to the project root."
        },
        "coinbase(address)": {
          "notice": "Sets `block.coinbase`."
        },
        "computeCreate2Address(bytes32,bytes32)": {
          "notice": "Compute the address of a contract created with CREATE2 using the default CREATE2 deployer."
        },
        "computeCreate2Address(bytes32,bytes32,address)": {
          "notice": "Compute the address of a contract created with CREATE2 using the given CREATE2 deployer."
        },
        "computeCreateAddress(address,uint256)": {
          "notice": "Compute the address a contract will be deployed at for a given deployer address and nonce."
        },
        "copyFile(string,string)": {
          "notice": "Copies the contents of one file to another. This function will **overwrite** the contents of `to`. On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`. Both `from` and `to` are relative to the project root."
        },
        "createDir(string,bool)": {
          "notice": "Creates a new, empty directory at the provided path. This cheatcode will revert in the following situations, but is not limited to just these cases: - User lacks permissions to modify `path`. - A parent of the given path doesn't exist and `recursive` is false. - `path` already exists and `recursive` is false. `path` is relative to the project root."
        },
        "createFork(string)": {
          "notice": "Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork."
        },
        "createFork(string,bytes32)": {
          "notice": "Creates a new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before the transaction, and returns the identifier of the fork."
        },
        "createFork(string,uint256)": {
          "notice": "Creates a new fork with the given endpoint and block and returns the identifier of the fork."
        },
        "createSelectFork(string)": {
          "notice": "Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork."
        },
        "createSelectFork(string,bytes32)": {
          "notice": "Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before the transaction, returns the identifier of the fork."
        },
        "createSelectFork(string,uint256)": {
          "notice": "Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork."
        },
        "createWallet(string)": {
          "notice": "Derives a private key from the name, labels the account with that name, and returns the wallet."
        },
        "createWallet(uint256)": {
          "notice": "Generates a wallet from the private key and returns the wallet."
        },
        "createWallet(uint256,string)": {
          "notice": "Generates a wallet from the private key, labels the account with that name, and returns the wallet."
        },
        "deal(address,uint256)": {
          "notice": "Sets an address' balance."
        },
        "deleteSnapshot(uint256)": {
          "notice": "Removes the snapshot with the given ID created by `snapshot`. Takes the snapshot ID to delete. Returns `true` if the snapshot was successfully deleted. Returns `false` if the snapshot does not exist."
        },
        "deleteSnapshots()": {
          "notice": "Removes _all_ snapshots previously created by `snapshot`."
        },
        "deriveKey(string,string,uint32)": {
          "notice": "Derive a private key from a provided mnenomic string (or mnenomic file path) at `{derivationPath}{index}`."
        },
        "deriveKey(string,string,uint32,string)": {
          "notice": "Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language at `{derivationPath}{index}`."
        },
        "deriveKey(string,uint32)": {
          "notice": "Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path `m/44'/60'/0'/0/{index}`."
        },
        "deriveKey(string,uint32,string)": {
          "notice": "Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language at the derivation path `m/44'/60'/0'/0/{index}`."
        },
        "difficulty(uint256)": {
          "notice": "Sets `block.difficulty`. Not available on EVM versions from Paris onwards. Use `prevrandao` instead. Reverts if used on unsupported EVM versions."
        },
        "dumpState(string)": {
          "notice": "Dump a genesis JSON file's `allocs` to disk."
        },
        "envAddress(string)": {
          "notice": "Gets the environment variable `name` and parses it as `address`. Reverts if the variable was not found or could not be parsed."
        },
        "envAddress(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "envBool(string)": {
          "notice": "Gets the environment variable `name` and parses it as `bool`. Reverts if the variable was not found or could not be parsed."
        },
        "envBool(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "envBytes(string)": {
          "notice": "Gets the environment variable `name` and parses it as `bytes`. Reverts if the variable was not found or could not be parsed."
        },
        "envBytes(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "envBytes32(string)": {
          "notice": "Gets the environment variable `name` and parses it as `bytes32`. Reverts if the variable was not found or could not be parsed."
        },
        "envBytes32(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "envInt(string)": {
          "notice": "Gets the environment variable `name` and parses it as `int256`. Reverts if the variable was not found or could not be parsed."
        },
        "envInt(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "envOr(string,address)": {
          "notice": "Gets the environment variable `name` and parses it as `address`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,bool)": {
          "notice": "Gets the environment variable `name` and parses it as `bool`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,bytes)": {
          "notice": "Gets the environment variable `name` and parses it as `bytes`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,bytes32)": {
          "notice": "Gets the environment variable `name` and parses it as `bytes32`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,int256)": {
          "notice": "Gets the environment variable `name` and parses it as `int256`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as `string`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,address[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,bool[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,bytes32[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,bytes[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,int256[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,string[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,string,uint256[])": {
          "notice": "Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envOr(string,uint256)": {
          "notice": "Gets the environment variable `name` and parses it as `uint256`. Reverts if the variable could not be parsed. Returns `defaultValue` if the variable was not found."
        },
        "envString(string)": {
          "notice": "Gets the environment variable `name` and parses it as `string`. Reverts if the variable was not found or could not be parsed."
        },
        "envString(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "envUint(string)": {
          "notice": "Gets the environment variable `name` and parses it as `uint256`. Reverts if the variable was not found or could not be parsed."
        },
        "envUint(string,string)": {
          "notice": "Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`. Reverts if the variable was not found or could not be parsed."
        },
        "etch(address,bytes)": {
          "notice": "Sets an address' code."
        },
        "eth_getLogs(uint256,uint256,address,bytes32[])": {
          "notice": "Gets all the logs according to specified filter."
        },
        "exists(string)": {
          "notice": "Returns true if the given path points to an existing entity, else returns false."
        },
        "expectCall(address,bytes)": {
          "notice": "Expects a call to an address with the specified calldata. Calldata can either be a strict or a partial match."
        },
        "expectCall(address,bytes,uint64)": {
          "notice": "Expects given number of calls to an address with the specified calldata."
        },
        "expectCall(address,uint256,bytes)": {
          "notice": "Expects a call to an address with the specified `msg.value` and calldata."
        },
        "expectCall(address,uint256,bytes,uint64)": {
          "notice": "Expects given number of calls to an address with the specified `msg.value` and calldata."
        },
        "expectCall(address,uint256,uint64,bytes)": {
          "notice": "Expect a call to an address with the specified `msg.value`, gas, and calldata."
        },
        "expectCall(address,uint256,uint64,bytes,uint64)": {
          "notice": "Expects given number of calls to an address with the specified `msg.value`, gas, and calldata."
        },
        "expectCallMinGas(address,uint256,uint64,bytes)": {
          "notice": "Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas."
        },
        "expectCallMinGas(address,uint256,uint64,bytes,uint64)": {
          "notice": "Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas."
        },
        "expectEmit()": {
          "notice": "Prepare an expected log with all topic and data checks enabled. Call this function, then emit an event, then call a function. Internally after the call, we check if logs were emitted in the expected order with the expected topics and data."
        },
        "expectEmit(address)": {
          "notice": "Same as the previous method, but also checks supplied address against emitting contract."
        },
        "expectEmit(bool,bool,bool,bool)": {
          "notice": "Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.). Call this function, then emit an event, then call a function. Internally after the call, we check if logs were emitted in the expected order with the expected topics and data (as specified by the booleans)."
        },
        "expectEmit(bool,bool,bool,bool,address)": {
          "notice": "Same as the previous method, but also checks supplied address against emitting contract."
        },
        "expectRevert()": {
          "notice": "Expects an error on next call with any revert data."
        },
        "expectRevert(bytes)": {
          "notice": "Expects an error on next call that exactly matches the revert data."
        },
        "expectRevert(bytes4)": {
          "notice": "Expects an error on next call that starts with the revert data."
        },
        "expectSafeMemory(uint64,uint64)": {
          "notice": "Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other memory is written to, the test will fail. Can be called multiple times to add more ranges to the set."
        },
        "expectSafeMemoryCall(uint64,uint64)": {
          "notice": "Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext. If any other memory is written to, the test will fail. Can be called multiple times to add more ranges to the set."
        },
        "fee(uint256)": {
          "notice": "Sets `block.basefee`."
        },
        "ffi(string[])": {
          "notice": "Performs a foreign function call via the terminal."
        },
        "fsMetadata(string)": {
          "notice": "Given a path, query the file system to get information about a file, directory, etc."
        },
        "getBlockNumber()": {
          "notice": "Gets the current `block.number`. You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction, and as a result will get optimized out by the compiler. See https://github.com/foundry-rs/foundry/issues/6180"
        },
        "getBlockTimestamp()": {
          "notice": "Gets the current `block.timestamp`. You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction, and as a result will get optimized out by the compiler. See https://github.com/foundry-rs/foundry/issues/6180"
        },
        "getCode(string)": {
          "notice": "Gets the creation bytecode from an artifact file. Takes in the relative path to the json file."
        },
        "getDeployedCode(string)": {
          "notice": "Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file."
        },
        "getLabel(address)": {
          "notice": "Gets the label for the specified address."
        },
        "getMappingKeyAndParentOf(address,bytes32)": {
          "notice": "Gets the map key and parent of a mapping at a given slot, for a given address."
        },
        "getMappingLength(address,bytes32)": {
          "notice": "Gets the number of elements in the mapping at the given slot, for a given address."
        },
        "getMappingSlotAt(address,bytes32,uint256)": {
          "notice": "Gets the elements at index idx of the mapping at the given slot, for a given address. The index must be less than the length of the mapping (i.e. the number of keys in the mapping)."
        },
        "getNonce((address,uint256,uint256,uint256))": {
          "notice": "Get a `Wallet`'s nonce."
        },
        "getNonce(address)": {
          "notice": "Gets the nonce of an account."
        },
        "getRecordedLogs()": {
          "notice": "Gets all the recorded logs."
        },
        "isDir(string)": {
          "notice": "Returns true if the path exists on disk and is pointing at a directory, else returns false."
        },
        "isFile(string)": {
          "notice": "Returns true if the path exists on disk and is pointing at a regular file, else returns false."
        },
        "isPersistent(address)": {
          "notice": "Returns true if the account is marked as persistent."
        },
        "keyExists(string,string)": {
          "notice": "Checks if `key` exists in a JSON object."
        },
        "label(address,string)": {
          "notice": "Labels an address in call traces."
        },
        "load(address,bytes32)": {
          "notice": "Loads a storage slot from an address."
        },
        "loadAllocs(string)": {
          "notice": "Load a genesis JSON file's `allocs` into the in-memory revm state."
        },
        "makePersistent(address)": {
          "notice": "Marks that the account(s) should use persistent storage across fork swaps in a multifork setup Meaning, changes made to the state of this account will be kept when switching forks."
        },
        "makePersistent(address,address)": {
          "notice": "See `makePersistent(address)`."
        },
        "makePersistent(address,address,address)": {
          "notice": "See `makePersistent(address)`."
        },
        "makePersistent(address[])": {
          "notice": "See `makePersistent(address)`."
        },
        "mockCall(address,bytes,bytes)": {
          "notice": "Mocks a call to an address, returning specified data. Calldata can either be strict or a partial match, e.g. if you only pass a Solidity selector to the expected calldata, then the entire Solidity function will be mocked."
        },
        "mockCall(address,uint256,bytes,bytes)": {
          "notice": "Mocks a call to an address with a specific `msg.value`, returning specified data. Calldata match takes precedence over `msg.value` in case of ambiguity."
        },
        "mockCallRevert(address,bytes,bytes)": {
          "notice": "Reverts a call to an address with specified revert data."
        },
        "mockCallRevert(address,uint256,bytes,bytes)": {
          "notice": "Reverts a call to an address with a specific `msg.value`, with specified revert data."
        },
        "parseAddress(string)": {
          "notice": "Parses the given `string` into an `address`."
        },
        "parseBool(string)": {
          "notice": "Parses the given `string` into a `bool`."
        },
        "parseBytes(string)": {
          "notice": "Parses the given `string` into `bytes`."
        },
        "parseBytes32(string)": {
          "notice": "Parses the given `string` into a `bytes32`."
        },
        "parseInt(string)": {
          "notice": "Parses the given `string` into a `int256`."
        },
        "parseJson(string)": {
          "notice": "ABI-encodes a JSON object."
        },
        "parseJson(string,string)": {
          "notice": "ABI-encodes a JSON object at `key`."
        },
        "parseJsonAddress(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `address`."
        },
        "parseJsonAddressArray(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `address[]`."
        },
        "parseJsonBool(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `bool`."
        },
        "parseJsonBoolArray(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `bool[]`."
        },
        "parseJsonBytes(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `bytes`."
        },
        "parseJsonBytes32(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `bytes32`."
        },
        "parseJsonBytes32Array(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `bytes32[]`."
        },
        "parseJsonBytesArray(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `bytes[]`."
        },
        "parseJsonInt(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `int256`."
        },
        "parseJsonIntArray(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `int256[]`."
        },
        "parseJsonKeys(string,string)": {
          "notice": "Returns an array of all the keys in a JSON object."
        },
        "parseJsonString(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `string`."
        },
        "parseJsonStringArray(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `string[]`."
        },
        "parseJsonUint(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `uint256`."
        },
        "parseJsonUintArray(string,string)": {
          "notice": "Parses a string of JSON data at `key` and coerces it to `uint256[]`."
        },
        "parseUint(string)": {
          "notice": "Parses the given `string` into a `uint256`."
        },
        "pauseGasMetering()": {
          "notice": "Pauses gas metering (i.e. gas usage is not counted). Noop if already paused."
        },
        "prank(address)": {
          "notice": "Sets the *next* call's `msg.sender` to be the input address."
        },
        "prank(address,address)": {
          "notice": "Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input."
        },
        "prevrandao(bytes32)": {
          "notice": "Sets `block.prevrandao`. Not available on EVM versions before Paris. Use `difficulty` instead. If used on unsupported EVM versions it will revert."
        },
        "projectRoot()": {
          "notice": "Get the path of the current project root."
        },
        "readCallers()": {
          "notice": "Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification."
        },
        "readDir(string)": {
          "notice": "Reads the directory at the given path recursively, up to `maxDepth`. `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned. Follows symbolic links if `followLinks` is true."
        },
        "readDir(string,uint64)": {
          "notice": "See `readDir(string)`."
        },
        "readDir(string,uint64,bool)": {
          "notice": "See `readDir(string)`."
        },
        "readFile(string)": {
          "notice": "Reads the entire content of file to string. `path` is relative to the project root."
        },
        "readFileBinary(string)": {
          "notice": "Reads the entire content of file as binary. `path` is relative to the project root."
        },
        "readLine(string)": {
          "notice": "Reads next line of file to string."
        },
        "readLink(string)": {
          "notice": "Reads a symbolic link, returning the path that the link points to. This cheatcode will revert in the following situations, but is not limited to just these cases: - `path` is not a symbolic link. - `path` does not exist."
        },
        "record()": {
          "notice": "Records all storage reads and writes."
        },
        "recordLogs()": {
          "notice": "Record all the transaction logs."
        },
        "rememberKey(uint256)": {
          "notice": "Adds a private key to the local forge wallet and returns the address."
        },
        "removeDir(string,bool)": {
          "notice": "Removes a directory at the provided path. This cheatcode will revert in the following situations, but is not limited to just these cases: - `path` doesn't exist. - `path` isn't a directory. - User lacks permissions to modify `path`. - The directory is not empty and `recursive` is false. `path` is relative to the project root."
        },
        "removeFile(string)": {
          "notice": "Removes a file from the filesystem. This cheatcode will revert in the following situations, but is not limited to just these cases: - `path` points to a directory. - The file doesn't exist. - The user lacks permissions to remove the file. `path` is relative to the project root."
        },
        "resetNonce(address)": {
          "notice": "Resets the nonce of an account to 0 for EOAs and 1 for contract accounts."
        },
        "resumeGasMetering()": {
          "notice": "Resumes gas metering (i.e. gas usage is counted again). Noop if already on."
        },
        "revertTo(uint256)": {
          "notice": "Revert the state of the EVM to a previous snapshot Takes the snapshot ID to revert to. Returns `true` if the snapshot was successfully reverted. Returns `false` if the snapshot does not exist. **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`."
        },
        "revertToAndDelete(uint256)": {
          "notice": "Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots Takes the snapshot ID to revert to. Returns `true` if the snapshot was successfully reverted and deleted. Returns `false` if the snapshot does not exist."
        },
        "revokePersistent(address)": {
          "notice": "Revokes persistent status from the address, previously added via `makePersistent`."
        },
        "revokePersistent(address[])": {
          "notice": "See `revokePersistent(address)`."
        },
        "roll(uint256)": {
          "notice": "Sets `block.height`."
        },
        "rollFork(bytes32)": {
          "notice": "Updates the currently active fork to given transaction. This will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block."
        },
        "rollFork(uint256)": {
          "notice": "Updates the currently active fork to given block number This is similar to `roll` but for the currently active fork."
        },
        "rollFork(uint256,bytes32)": {
          "notice": "Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block."
        },
        "rollFork(uint256,uint256)": {
          "notice": "Updates the given fork to given block number."
        },
        "rpc(string,string)": {
          "notice": "Performs an Ethereum JSON-RPC request to the current fork URL."
        },
        "rpcUrl(string)": {
          "notice": "Returns the RPC url for the given alias."
        },
        "rpcUrlStructs()": {
          "notice": "Returns all rpc urls and their aliases as structs."
        },
        "rpcUrls()": {
          "notice": "Returns all rpc urls and their aliases `[alias, url][]`."
        },
        "selectFork(uint256)": {
          "notice": "Takes a fork identifier created by `createFork` and sets the corresponding forked state as active."
        },
        "serializeAddress(string,string,address)": {
          "notice": "See `serializeJson`."
        },
        "serializeAddress(string,string,address[])": {
          "notice": "See `serializeJson`."
        },
        "serializeBool(string,string,bool)": {
          "notice": "See `serializeJson`."
        },
        "serializeBool(string,string,bool[])": {
          "notice": "See `serializeJson`."
        },
        "serializeBytes(string,string,bytes)": {
          "notice": "See `serializeJson`."
        },
        "serializeBytes(string,string,bytes[])": {
          "notice": "See `serializeJson`."
        },
        "serializeBytes32(string,string,bytes32)": {
          "notice": "See `serializeJson`."
        },
        "serializeBytes32(string,string,bytes32[])": {
          "notice": "See `serializeJson`."
        },
        "serializeInt(string,string,int256)": {
          "notice": "See `serializeJson`."
        },
        "serializeInt(string,string,int256[])": {
          "notice": "See `serializeJson`."
        },
        "serializeJson(string,string)": {
          "notice": "Serializes a key and value to a JSON object stored in-memory that can be later written to a file. Returns the stringified version of the specific JSON file up to that moment."
        },
        "serializeString(string,string,string)": {
          "notice": "See `serializeJson`."
        },
        "serializeString(string,string,string[])": {
          "notice": "See `serializeJson`."
        },
        "serializeUint(string,string,uint256)": {
          "notice": "See `serializeJson`."
        },
        "serializeUint(string,string,uint256[])": {
          "notice": "See `serializeJson`."
        },
        "setEnv(string,string)": {
          "notice": "Sets environment variables."
        },
        "setNonce(address,uint64)": {
          "notice": "Sets the nonce of an account. Must be higher than the current nonce of the account."
        },
        "setNonceUnsafe(address,uint64)": {
          "notice": "Sets the nonce of an account to an arbitrary value."
        },
        "sign((address,uint256,uint256,uint256),bytes32)": {
          "notice": "Signs data with a `Wallet`."
        },
        "sign(uint256,bytes32)": {
          "notice": "Signs `digest` with `privateKey` using the secp256k1 curve."
        },
        "signP256(uint256,bytes32)": {
          "notice": "Signs `digest` with `privateKey` using the secp256r1 curve."
        },
        "skip(bool)": {
          "notice": "Marks a test as skipped. Must be called at the top of the test."
        },
        "sleep(uint256)": {
          "notice": "Suspends execution of the main thread for `duration` milliseconds."
        },
        "snapshot()": {
          "notice": "Snapshot the current state of the evm. Returns the ID of the snapshot that was created. To revert a snapshot use `revertTo`."
        },
        "startBroadcast()": {
          "notice": "Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain."
        },
        "startBroadcast(address)": {
          "notice": "Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain."
        },
        "startBroadcast(uint256)": {
          "notice": "Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain."
        },
        "startMappingRecording()": {
          "notice": "Starts recording all map SSTOREs for later retrieval."
        },
        "startPrank(address)": {
          "notice": "Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called."
        },
        "startPrank(address,address)": {
          "notice": "Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input."
        },
        "startStateDiffRecording()": {
          "notice": "Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order, along with the context of the calls"
        },
        "stopAndReturnStateDiff()": {
          "notice": "Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session."
        },
        "stopBroadcast()": {
          "notice": "Stops collecting onchain transactions."
        },
        "stopMappingRecording()": {
          "notice": "Stops recording all map SSTOREs for later retrieval and clears the recorded data."
        },
        "stopPrank()": {
          "notice": "Resets subsequent calls' `msg.sender` to be `address(this)`."
        },
        "store(address,bytes32,bytes32)": {
          "notice": "Stores a value to an address' storage slot."
        },
        "toBase64(bytes)": {
          "notice": "Encodes a `bytes` value to a base64 string."
        },
        "toBase64(string)": {
          "notice": "Encodes a `string` value to a base64 string."
        },
        "toBase64URL(bytes)": {
          "notice": "Encodes a `bytes` value to a base64url string."
        },
        "toBase64URL(string)": {
          "notice": "Encodes a `string` value to a base64url string."
        },
        "toString(address)": {
          "notice": "Converts the given value to a `string`."
        },
        "toString(bool)": {
          "notice": "Converts the given value to a `string`."
        },
        "toString(bytes)": {
          "notice": "Converts the given value to a `string`."
        },
        "toString(bytes32)": {
          "notice": "Converts the given value to a `string`."
        },
        "toString(int256)": {
          "notice": "Converts the given value to a `string`."
        },
        "toString(uint256)": {
          "notice": "Converts the given value to a `string`."
        },
        "transact(bytes32)": {
          "notice": "Fetches the given transaction from the active fork and executes it on the current state."
        },
        "transact(uint256,bytes32)": {
          "notice": "Fetches the given transaction from the given fork and executes it on the current state."
        },
        "tryFfi(string[])": {
          "notice": "Performs a foreign function call via terminal and returns the exit code, stdout, and stderr."
        },
        "txGasPrice(uint256)": {
          "notice": "Sets `tx.gasprice`."
        },
        "unixTime()": {
          "notice": "Returns the time since unix epoch in milliseconds."
        },
        "warp(uint256)": {
          "notice": "Sets `block.timestamp`."
        },
        "writeFile(string,string)": {
          "notice": "Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does. `path` is relative to the project root."
        },
        "writeFileBinary(string,bytes)": {
          "notice": "Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does. `path` is relative to the project root."
        },
        "writeJson(string,string)": {
          "notice": "Write a serialized JSON object to a file. If the file exists, it will be overwritten."
        },
        "writeJson(string,string,string)": {
          "notice": "Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.> This is useful to replace a specific value of a JSON file, without having to parse the entire thing."
        },
        "writeLine(string,string)": {
          "notice": "Writes line to file, creating a file if it does not exist. `path` is relative to the project root."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@ensdomains/=node_modules/@ensdomains/",
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@solidity-parser/=node_modules/prettier-plugin-solidity/node_modules/@solidity-parser/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "eth-gas-reporter/=node_modules/eth-gas-reporter/",
      "forge-std/=lib/forge-std/src/",
      "hardhat/=node_modules/hardhat/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "lib/forge-std/src/Vm.sol": "Vm"
    },
    "evmVersion": "istanbul",
    "libraries": {}
  },
  "sources": {
    "lib/forge-std/src/Vm.sol": {
      "keccak256": "0x87ba9f3edc254e529db9e3129c954391adcc7fc8574203767979d8d2f1e724b9",
      "urls": [
        "bzz-raw://4d16c08d80d9f2869deb6350642cf5af624d21fce6b3b023abbcdedc62e195fe",
        "dweb:/ipfs/QmURpnnFECPKt3i7P7jQRZpr4ZBXjRGcZ9KzcbKzsgYR2W"
      ],
      "license": "MIT OR Apache-2.0"
    }
  },
  "version": 1
}